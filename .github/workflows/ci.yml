name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  unit-tests:
    name: Unit Tests (Fast)
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Run unit tests (Pure Python, no Nautilus)
        run: |
          uv run pytest tests/unit -v -n auto \
            --cov=src \
            --cov-report=xml \
            --cov-report=term-missing \
            --tb=short

      - name: Upload unit test coverage
        if: matrix.python-version == '3.11'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-unit
          path: coverage.xml

  component-tests:
    name: Component Tests (Test Doubles)
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Run component tests (with test doubles)
        run: |
          uv run pytest tests/component -v -n auto \
            --cov=src \
            --cov-report=xml \
            --cov-report=term-missing \
            --tb=short

      - name: Upload component test coverage
        if: matrix.python-version == '3.11'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-component
          path: coverage.xml

  integration-tests:
    name: Integration Tests (Real Nautilus)
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Run integration tests (subprocess isolated)
        run: |
          uv run pytest tests/integration -v -n auto --forked \
            --cov=src \
            --cov-report=xml \
            --cov-report=term-missing \
            --tb=short

      - name: Upload integration test coverage
        if: matrix.python-version == '3.11'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-integration
          path: coverage.xml

  coverage-report:
    name: Combined Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests, component-tests, integration-tests]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          path: coverage-reports/
        continue-on-error: true

      - name: Run all tests with combined coverage
        run: |
          uv run pytest tests/ -v -n auto \
            --cov=src \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-report=html \
            --cov-fail-under=70 \
            --tb=short

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-lint-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-lint-

      - name: Install dependencies
        run: |
          uv sync --dev
          uv add --dev mypy

      - name: Run Ruff format check
        run: |
          echo "::group::Ruff Format Check"
          uv run ruff format --check . --diff
          echo "::endgroup::"

      - name: Run Ruff lint
        run: |
          echo "::group::Ruff Lint Check"
          uv run ruff check . --output-format=github
          echo "::endgroup::"

      - name: Run type checking
        run: |
          echo "::group::MyPy Type Check"
          uv run mypy src/ --ignore-missing-imports --show-error-codes || true
          echo "::endgroup::"

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv sync --dev
          uv add --dev bandit safety

      - name: Run Bandit security scan
        run: |
          echo "::group::Bandit Security Scan"
          uv run bandit -r src/ -f json -o bandit-report.json || true
          uv run bandit -r src/ -f txt || true
          echo "::endgroup::"

      - name: Check for known security vulnerabilities
        run: |
          echo "::group::Safety Vulnerability Check"
          uv run safety check --json || true
          echo "::endgroup::"

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json

  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, component-tests, integration-tests, coverage-report, lint, security]
    if: always()

    steps:
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage/
        continue-on-error: true

      - name: Test Results Summary
        run: |
          echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Pyramid (Unit → Component → Integration)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.unit-tests.result }}" == "success" ]]; then
            echo "✅ **Unit Tests** (Pure Python, ~0.5s): PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Unit Tests** (Pure Python, ~0.5s): FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.component-tests.result }}" == "success" ]]; then
            echo "✅ **Component Tests** (Test Doubles, ~0.5s): PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Component Tests** (Test Doubles, ~0.5s): FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.integration-tests.result }}" == "success" ]]; then
            echo "✅ **Integration Tests** (Real Nautilus, ~5s): PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Integration Tests** (Real Nautilus, ~5s): FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Code Quality" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.lint.result }}" == "success" ]]; then
            echo "✅ **Linting & Formatting**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Linting & Formatting**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.security.result }}" == "success" ]]; then
            echo "✅ **Security Scan**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Security Scan**: COMPLETED WITH WARNINGS" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.coverage-report.result }}" == "success" ]]; then
            echo "✅ **Coverage Report**: PASSED (≥70%)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Coverage Report**: FAILED (<70%)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Detailed Coverage Report**: Available in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "🏗️ **Test Architecture**: Following test pyramid pattern (50% unit, 25% component, 20% integration)" >> $GITHUB_STEP_SUMMARY